{"version":3,"sources":["components/shuffle.js","App.js","index.js"],"names":["Shuffle","cards","positions","size","length","i","n","Math","floor","random","check","includes","push","map","pos","shuffledDeck","initialState","hand","deck","turn","direction","potCards","draw","potColor","playCard","name","order","players","ID","gameServer","deal","gameOn","UNO","winner","connecting","App","props","cardInfo","card","color","type","value","state","bind","play","checkColor","updateColor","handleSubmit","start","reset","this","setState","Array","socket","emit","e","split","join","socketIOClient","on","message","alert","userInfo","newUser","lostUser","updatedState","preventDefault","copyDeck","player","dealInterval","setInterval","j","clearInterval","updatedDeck","slice","parseInt","target","dataset","valArr","index","window","$","modal","cardIndex","colorCheck","playerHand","splice","abs","trun","d","console","log","drawInterval","pot","newDeck","unshift","potSize","connectedPlayers","style","className","id","onClick","alt","width","height","src","backgroundColor","data-player","data-value","data-index","data-keyboard","data-backdrop","data-dismiss","aria-label","aria-hidden","onChange","fontSize","onSubmit","placeholder","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e4b0801.chunk.js","sourcesContent":["function Shuffle(cards) {\r\n\r\n    var positions = [];\r\n    var size = cards.length;\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        var n = Math.floor(Math.random() * (size));\r\n        var check = positions.includes(n);\r\n\r\n        if (check === false) {\r\n            positions.push(n);\r\n        }\r\n        else {\r\n            while (check === true) {\r\n                n = Math.floor(Math.random() * (size));\r\n                check = positions.includes(n);\r\n                if (check === false) {\r\n                    positions.push(n);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    var shuffledCards = positions.map( pos => cards[pos]);\r\n\r\n    return shuffledCards;\r\n}\r\n\r\nexport default Shuffle;","import './App.css';\nimport { Component } from 'react';\nimport Shuffle from './components/shuffle';\nimport socketIOClient from 'socket.io-client';\n\n\nconst serverPort = 'https://uno-server.glitch.me';\n\nconst fullDeck = [\n  'b+2', 'b+2', 'b0', 'b1', 'b1', 'b2', 'b2', 'b3', 'b3', 'b4', 'b4', 'b5', 'b5', 'b6', 'b6', 'b7', 'b7', 'b8', 'b8', 'b9', 'b9', 'brev', 'brev', 'bskip', 'bskip',\n  'g+2', 'g+2', 'g0', 'g1', 'g1', 'g2', 'g2', 'g3', 'g3', 'g4', 'g4', 'g5', 'g5', 'g6', 'g6', 'g7', 'g7', 'g8', 'g8', 'g9', 'g9', 'grev', 'grev', 'gskip', 'gskip',\n  'r+2', 'r+2', 'r0', 'r1', 'r1', 'r2', 'r2', 'r3', 'r3', 'r4', 'r4', 'r5', 'r5', 'r6', 'r6', 'r7', 'r7', 'r8', 'r8', 'r9', 'r9', 'rrev', 'rrev', 'rskip', 'rskip',\n  'y+2', 'y+2', 'y0', 'y1', 'y1', 'y2', 'y2', 'y3', 'y3', 'y4', 'y4', 'y5', 'y5', 'y6', 'y6', 'y7', 'y7', 'y8', 'y8', 'y9', 'y9', 'yrev', 'yrev', 'yskip', 'yskip',\n  'wild', 'wild', 'wild', 'wild',\n  'wild+4', 'wild+4', 'wild+4', 'wild+4'\n];\n\nconst shuffledDeck = Shuffle(fullDeck);\n\nconst initialState = {\n  hand: [], deck: [], turn: null, direction: 1, potCards: [], draw: 0, potColor: '', playCard: [], name: '', order: null, players: [], ID: null, gameServer: false, deal: true, gameOn: false, UNO: false, winner: null, connecting: false\n};\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.deal = this.deal.bind(this);\n    this.play = this.play.bind(this);\n    this.playCard = this.playCard.bind(this);\n    this.checkColor = this.checkColor.bind(this);\n    this.cardInfo = this.cardInfo.bind(this);\n    this.updateColor = this.updateColor.bind(this);\n    this.draw = this.draw.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.start = this.start.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  // to reset the gamge after a player wins\n  reset() {\n    this.setState({\n      hand: [...Array(this.state.players.length)].map(i => []), deck: [], turn: null, direction: 1, potCards: [], draw: 0, potColor: '', playCard: [], deal: true, gameOn: false, UNO: false, winner: null\n    },\n      () => {\n        this.socket.emit('updateState', { hand: this.state.hand, deck: this.state.deck, turn: this.state.turn, direction: this.state.direction, potCards: this.state.potCards, draw: this.state.draw, potColor: this.state.potColor, playCard: this.state.playCard, deal: this.state.deal, gameOn: this.state.gameOn, UNO: this.state.UNO, winner: this.state.winner })\n      });\n  }\n\n  // to handle joining game server\n  handleSubmit(e) {\n    let name = this.state.name;\n    if (!name.split(' ').join('')) {\n      alert('name field is empty');\n      return;\n    }\n\n    this.socket = socketIOClient(serverPort);\n    this.setState({connecting: true});\n    this.socket.on('join', message => {\n      if (message === false) {\n        alert('game session is on. \\n can not currently join server');\n        this.socket = null;\n        return;\n      }\n      else {\n        this.socket.emit('name', name);\n        this.socket.on('usersInfo', userInfo => {\n          this.setState({ order: userInfo[0], players: userInfo[1], ID: userInfo[2], hand: userInfo[3] });\n          this.setState({ gameServer: true, connecting: false })\n        });\n        this.socket.on('newUser', newUser => {\n          this.setState({ players: newUser[0], hand: newUser[1] });\n        });\n        this.socket.on('lostUser', lostUser => {\n          alert(`${this.state.players[lostUser[2]]} lost connection. Resetting game.`)\n          this.setState({ players: lostUser[0], hand: lostUser[1] });\n          this.setState({\n            deck: [], turn: null, direction: 1, potCards: [], draw: 0, potColor: '', playCard: [], deal: true, gameOn: false, UNO: false, winner: null\n          });\n        });\n        this.socket.on('updateOrder', order => {\n          this.setState({ order: order });\n        });\n        this.socket.on('updateState', (updatedState) => {\n          this.setState((state) => ({ ...state, ...updatedState }), ()=> {if(this.state.turn === this.state.order && 'turn' in updatedState) alert('It is your turn!')});\n        });\n        // this.socket.on('disconnect', () => {\n        //   this.socket = null;\n        //   this.setState({...initialState});\n        // });\n      }\n    })\n\n\n    e.preventDefault();\n  }\n\n  // for dealer to start the game after all players join server.\n  start() {\n    if (this.state.players.length < 2) alert(\"This game is not for the lonely. You need at least one friend to join the game.\");\n    else {\n      this.setState({ gameOn: true, deck: shuffledDeck },\n        () => {\n          this.socket.emit('updateState', { gameOn: this.state.gameOn, deck: this.state.deck })\n        });\n    }\n  }\n\n  // to handle dealer dealing cards at the start of the game\n  deal() {\n    let copyDeck = this.state.deck;\n    let player = this.state.players.length;\n    let hand = this.state.hand;\n\n    var i = 0;\n    var dealInterval = setInterval(() => {\n      i++;\n      for (let j = 0; j < player; j++) {\n        hand[j].push(copyDeck[j + i * player]);\n      }\n      this.setState({ hand: hand },\n        () => { this.socket.emit('updateState', { hand: this.state.hand }) });\n      if (i >= 7) {\n        clearInterval(dealInterval);\n      }\n\n    }, 1000)\n\n    let updatedDeck = copyDeck.slice(7 * player);\n\n    this.setState({ deck: updatedDeck, turn: 1, deal: false },\n      () => { this.socket.emit('updateState', { deck: this.state.deck, turn: this.state.turn }) });\n  }\n\n  // to handle a player playing a card\n  playCard(e) {\n    if (parseInt(e.target.dataset.player) !== this.state.turn) {\n      alert(`Slow down! It's not your turn!!`);\n    }\n    else {\n      let valArr = [e.target.dataset.value, parseInt(e.target.dataset.index)];\n      this.setState({ playCard: valArr }, () => { window.$('#playModal').modal('show'); });\n    }\n  }\n\n  // to handle the response to a player playing a card\n  play(e) {\n    let value = this.state.playCard[0];\n    let cardIndex = this.state.playCard[1];\n    let playCard = this.cardInfo(value);\n    let colorCheck = this.checkColor(playCard);\n    let player = this.state.players.length;\n\n    if (colorCheck) {\n      if (this.state.draw !== 0 && playCard.type !== '+2' && playCard.type !== 'wild+4') {\n        alert(`You have to draw ${this.state.draw} cards SUCKER!!`);\n      }\n      else {\n        let turn = this.state.turn;\n        let hand = this.state.hand;\n        let playerHand = this.state.hand[turn];\n        playerHand.splice(cardIndex, 1);\n        hand[turn] = playerHand;\n        if ((playerHand.length === 1 && !this.state.UNO) || (playerHand.length > 1 && this.state.UNO)) {\n          this.draw(null, 5);\n        }\n        else if (playerHand.length === 0) {\n          this.setState((state) => ({ winner: state.name }),\n            () => {\n              this.socket.emit('updateState', { winner: this.state.name })\n            });\n          return;\n        }\n        if (playCard.type === 'regular') {\n          this.setState((state) => ({ hand: hand, turn: Math.abs(state.turn + state.direction) % player, potCards: [state.potCards, value], potColor: playCard.color }),\n            () => { this.socket.emit('updateState', { hand: this.state.hand, turn: this.state.turn, potCards: this.state.potCards, potColor: this.state.potColor }) });\n        }\n        else if (playCard.type === 'rev') {\n          if (player === 2) {\n            this.setState((state) => ({ hand: hand, turn: Math.abs(state.turn + 2 * state.direction) % player, potCards: [state.potCards, value], potColor: playCard.color }),\n              () => { this.socket.emit('updateState', { hand: this.state.hand, turn: this.state.turn, potCards: this.state.potCards, potColor: this.state.potColor }) });\n          }\n          else {\n            this.setState((state) => ({ hand: hand, trun: Math.abs(state.turn - state.direction) % player, direction: -1 * state.direction, potCards: [state.potCards, value], potColor: playCard.color }),\n              () => { this.socket.emit('updateState', { hand: this.state.hand, turn: this.state.turn, direction: this.state.direction, potCards: this.state.potCards, potColor: this.state.potColor }) });\n          }\n        }\n        else if (playCard.type === 'skip') {\n          this.setState((state) => ({ hand: hand, trun: Math.abs(state.turn + 2 * state.direction) % player, potCards: [state.potCards, value], potColor: playCard.color }),\n            () => { this.socket.emit('updateState', { hand: this.state.hand, turn: this.state.turn, potCards: this.state.potCards, potColor: this.state.potColor }) });\n        }\n        else if (playCard.type === '+2') {\n          this.setState((state) => ({ hand: hand, turn: Math.abs(state.turn + state.direction) % player, potCards: [state.potCards, value], draw: state.draw + 2, potColor: playCard.color }),\n            () => { this.socket.emit('updateState', { hand: this.state.hand, turn: this.state.turn, potCards: this.state.potCards, draw: this.state.draw, potColor: this.state.potColor }) });\n        }\n        else if (playCard.type === 'wild') {\n          this.setState((state) => ({ hand: hand, potCards: [state.potCards, value] }),\n            () => { this.socket.emit('updateState', { hand: this.state.hand, potCards: this.state.potCards }) });\n          window.$('#colorModal').modal('show');\n        }\n        else if (playCard.type === 'wild+4') {\n          this.setState((state) => ({ hand: hand, potCards: [state.potCards, value], draw: state.draw + 4 }),\n            () => { this.socket.emit('updateState', { hand: this.state.hand, potCards: this.state.potCards, draw: this.state.draw }) });\n          window.$('#colorModal').modal('show');\n        }\n      }\n    }\n\n    else {\n      alert(\"color or number doesn't match!! \\n play another card or draw a card!!\");\n    }\n  }\n\n  // to handle a player drawing a card or multiple cards\n  draw(e, d) {\n    if (e) {\n      if (parseInt(e.target.dataset.player) !== this.state.turn) {\n        alert(`Slow down! It's not your turn!!`);\n        return;\n      }\n    }\n\n    console.log(d);\n    let deck = this.state.deck;\n    let turn = this.state.turn;\n    let draw;\n    if (d) draw = d;\n    else if (this.state.draw) draw = this.state.draw;\n    else draw = 1;\n    //draw = (this.state.draw) ? this.state.draw : 1;\n    let player = this.state.players.length;\n\n    if (deck.length >= draw) {\n      let j = 0;\n      let drawInterval = setInterval(() => {\n        j++;\n        let hand = this.state.hand;\n        let playerHand = hand[turn];\n        playerHand.push(deck.splice(-1)[0]);\n        hand[turn] = playerHand;\n        this.setState({ hand: hand }, () => {\n          this.socket.emit('updateState', { hand: this.state.hand })\n        });\n\n        if (j >= draw) {\n\n          this.setState((state) => ({ deck: deck, turn: (d) ? state.turn : Math.abs(state.turn + state.direction) % player, draw: (d) ? state.draw : 0 }),\n            () => {\n              this.socket.emit('updateState', { deck: this.state.deck, turn: this.state.turn, draw: this.state.draw, hand: this.state.hand })\n            });\n\n          clearInterval(drawInterval);\n        }\n\n\n\n      }, 500);\n\n\n    }\n\n    else {\n      let pot = this.state.potCards;\n      var newDeck = deck.unshift(Shuffle(pot.splice(0, pot.length - 1)));\n\n      let j = 0;\n      let drawInterval = setInterval(() => {\n        j++;\n\n        let hand = this.state.hand;\n        let playerHand = this.state.hand[turn];\n        playerHand.push(newDeck.splice(-1)[0]);\n        hand[turn] = playerHand;\n        this.setState({ hand: hand }, () => {\n          this.socket.emit('updateState', { hand: this.state.hand })\n        });\n\n        if (j >= draw) {\n          this.setState((state) => ({ deck: newDeck, turn: (d) ? state.turn : Math.abs(state.turn + state.direction) % player, potCards: pot, draw: (d) ? state.draw : 0 }),\n            () => {\n              this.socket.emit('updateState', { deck: this.state.deck, turn: this.state.turn, potCards: this.state.potCards, draw: this.state.draw, hand: this.state.hand })\n            });\n\n          clearInterval(drawInterval);\n        }\n\n      }, 500);\n    }\n  }\n\n  // to handle the rule checking if the player played the right type of card\n  checkColor(card) {\n    let pot = this.state.potCards;\n    let potSize = pot.length;\n    let potColor = this.state.potColor;\n    if (potSize !== 0) {\n      if (card.type === 'regular' && pot.slice(-1)[0].slice(1) !== card.value && potColor !== card.color) return false;\n      else if (card.type === '+2' && pot.slice(-1)[0].slice(1) !== '+2' && potColor !== card.color) return false;\n      else if (card.type === 'rev' && pot.slice(-1)[0].slice(1) !== 'rev' && potColor !== card.color) return false;\n      else if (card.type === 'skip' && pot.slice(-1)[0].slice(1) !== 'skip' && potColor !== card.color) return false;\n    }\n    return true;\n  }\n\n  // to update color of discard pile when player changes it using a wild card\n  updateColor(e) {\n    let color = e.target.dataset.value;\n    let player = this.state.players.length;\n    this.setState((state) => ({ potColor: color, turn: Math.abs(state.turn + state.direction) % player }),\n      () => { this.socket.emit('updateState', { potColor: this.state.potColor, turn: this.state.turn }) });\n  }\n\n  // to get the property of card played\n  cardInfo = (card) => {\n    const length = card.length;\n    var color, type, value;\n    if (card[0] === 'r' || card[0] === 'g' || card[0] === 'b' || card[0] === 'y') {\n      color = card[0];\n      if (length === 2) { type = 'regular'; value = card[1] }\n      else if (length === 3) type = '+2';\n      else if (length === 4) type = 'rev';\n      else type = 'skip';\n    }\n    else {\n      color = 'pending';\n      type = card;\n    }\n    return { color: color, type: type, value: value };\n  };\n\n\n  componentDidMount() {\n   \n  }\n\n  render() {\n\n    const pot = () => {\n      if (this.state.potCards.length) {\n        return (\n          <img alt='pot card' width={61.5} height={87.8} src={'./images/cards/' + this.state.potCards.slice(-1)[0] + '.png'} style={{}} />\n        )\n      }\n      else {\n        return (\n          <img alt='pot card' width={61.5} height={87.8} src=\"./images/cards/blank.png\" />\n        );\n      }\n    }\n    const hand = (player) => this.state.hand[player].map((card, i) => {\n      return (\n        <button key={i} className='btn btn-info' onClick={this.playCard}>\n          <img alt='card' width={41.0} height={58.5} data-player={player} data-value={card} data-index={i} src={'./images/cards/' + card + '.png'} />\n        </button>\n      );\n    });\n\n    const playCardImg = () => {\n      return <img alt='play card' id='cardImg' width={61.5} height={87.8} src={'./images/cards/' + this.state.playCard[0] + '.png'} onChange={() => { }} />;\n    };\n\n    const drawButton = (player) => {\n      return <button className='btn btn-info btn-sm' data-player={player} onClick={(e) => { this.draw(e, 0) }}>DRAW {this.state.draw > 0 ? <span className='badge badge-light'>{this.state.draw}</span> : null}</button>\n    };\n\n    const connectedPlayers = this.state.players.map((name, i) => {\n      return (\n        <div key={i} >{i + 1}) {name} {(i === 0) ? (<span style={{ color: 'red' }}> &lt;--DEALER</span>) : null}</div>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        {(!this.state.gameServer && !this.state.connecting) ? (\n          <div className='col-12' id='homePage'>\n            <div className='col-12 header'>Welcome to UNO Game!</div>\n            <div className='col-12'>\n              {/* <button onClick={() => { console.log(this.state) }}>State</button> */}\n              <form onSubmit={this.handleSubmit}>\n                <label>\n                  <b>Your name:</b><br />\n                  <input type=\"text\" value={this.state.name} onChange={(e) => this.setState({ name: e.target.value })} placeholder='name' />\n                </label><br />\n                <input type=\"submit\" value=\"Join Game\" className='button' />\n              </form>\n            </div>\n          </div>\n        ) : ((this.state.connecting)? <div>\n          Connecting to server... Pelase Wait\n        </div>:((this.state.gameServer && !this.state.gameOn) ? (\n          <div className='col-12' id='waitingPage'>\n            <div className='col-12'>{`${this.state.name}, you have now joined the server! \\n See below for list of players in the waiting area. If you are the dealer, once you see all the players you want to play with press start. Otherwise wait till the dealer starts the game.`}</div>\n            <div className='col-6'>\n              {/* <button onClick={() => { console.log(this.state) }}>State</button> <br /> */}\n              <b>List of connected players</b>\n              {connectedPlayers}\n            </div>\n            {(this.state.order === 0) ? <div className='col-6'>\n              <button onClick={this.start}>Start Game</button>\n            </div> : null}\n          </div>\n        )\n          : ((this.state.winner === null) ? (\n            <div>\n              <div className='row fix-it'>\n                <div className='col-12' id='deal'>\n                  {/* <button onClick={() => { console.log(this.state) }}>State</button> */}\n                  {(this.state.order === 0 && this.state.deal) ? (<button className='btn btn-success btn-sm' onClick={this.deal}>DEAL</button>) : null}\n                </div>\n                <div className='col-2' id='pot'>\n                  <figure>\n                    {pot()}\n                    <figcaption style={{ 'fontSize': '6pt', 'fontWeight': 'bold', width: 61.5, 'textAlign': 'center' }}>DISCARD POT</figcaption>\n                  </figure>\n                  <button className='btn btn-sm' style={{ backgroundColor: (this.state.UNO) ? 'red' : 'grey' }} onClick={() => this.setState((state) => ({ UNO: !state.UNO }))}>UNO</button>\n                </div>\n                <div className='col-2' id='deck'>\n                  <img alt='deck card' width={61.5} height={87.8} src=\"./images/cards/back.png\" /><br />\n                  {drawButton(this.state.order)}\n                </div>\n                <div className='col-8' id='message-board'>\n                  <div className=\"card\" style={{ width: '100%' }}>\n                    <div className=\"card-body\">\n                      <h5 className=\"card-title\">Message Board</h5>\n                      <p className=\"card-text\">\n                        <b>TURN: {this.state.players[this.state.turn]}</b><br />\n                        <b>POT COLOR: {(this.state.potColor === 'r') ? <span style={{ color: 'red' }}>RED</span> : ((this.state.potColor === 'b') ? <span style={{ color: 'blue' }}>BLUE</span> : ((this.state.potColor === 'g') ? <span style={{ color: 'green' }}>GREEN</span> : ((this.state.potColor === 'y') ? <span style={{ color: 'darkorange' }}>YELLOW</span> : null)))}</b> <br />\n                        <b>HAND:  {this.state.players.map((name, i) => <span key={i}>{name}; {this.state.hand[i].length},</span>)}</b>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className='row below'>\n                <div className='col-12' id='hand'>\n                  {hand(this.state.order)}\n                </div>\n\n                <div className='modal' id='colorModal' data-keyboard=\"false\" data-backdrop=\"static\">\n                  <div className='modal-content'>\n                    <div className='modal-header'>\n                      <h5 className=\"modal-title\">MESSAGE</h5>\n                    </div>\n                    <div className='modal-body'>\n                      <p> What color do you want to change to or stay the same color with? </p>\n                    </div>\n                    <div className=\"modal-footer\">\n                      <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" data-value={'r'} onClick={this.updateColor}>RED</button>\n                      <button type=\"button\" className=\"btn btn-success\" data-dismiss=\"modal\" data-value={'g'} onClick={this.updateColor}>GREEN</button>\n                      <button type=\"button\" className=\"btn btn-warning\" data-dismiss=\"modal\" data-value={'y'} onClick={this.updateColor}>YELLOW</button>\n                      <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" data-value={'b'} onClick={this.updateColor}>BLUE</button>\n                    </div>\n                  </div>\n                </div>\n                <div className='modal' id='playModal'>\n                  <div className='modal-content'>\n                    <div className='modal-header'>\n                      <h5 className=\"modal-title\">WANT TO PLAY THE CARD BELOW?</h5>\n                      <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                    </div>\n                    <div className='modal-body'>\n                      {playCardImg()}\n                    </div>\n                    <div className=\"modal-footer\">\n                      <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" >CANCEL</button>\n                      <button type=\"button\" className=\"btn btn-success\" data-dismiss=\"modal\" id='play' value='a,b' onClick={this.play}>YES</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : <div style={{ fontSize: '20pt' }}>\n              {this.state.winner} WON THE GAME!!!! <br />\n              <button className='btn btn-sm btn-success' onClick={this.reset}>RESTART GAME</button>\n            </div>)))}\n\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}